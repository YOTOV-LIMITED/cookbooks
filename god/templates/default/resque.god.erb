<%= @options['queue_count'] %>.times do |i|
  God.watch do |w|
    w.dir      = '<%= node[:app][:app_root] %>/current'
    w.name     = "resque-<%= @options['queue'] %>-#{i}"
    w.group    = 'resque'
    w.uid      = '<%= node[:capistrano][:deploy_user] %>'
    w.interval = 10.seconds
    w.env      = {
      "QUEUE"     => '<%= @options['queue'] %>',
      "RAILS_ENV" => '<%= node[:rails][:environment] %>',
      "INTERVAL"  => "<%= @options['interval'] %>"
    }
    w.start    = "bundle exec rake resque:work"
    w.log      = File.join("<%= node[:app][:app_root] %>", "current", "log/resque-<%= @options['queue'] %>.log")

    # restart if memory gets too high
    w.transition(:up, :restart) do |on|
      on.condition(:memory_usage) do |c|
        c.above = 500.megabytes
        c.times = 2
      end
    end

    # determine the state on startup
    w.transition(:init, { true => :up, false => :start }) do |on|
      on.condition(:process_running) do |c|
        c.running = true
      end
    end

    # determine when process has finished starting
    w.transition([:start, :restart], :up) do |on|
      on.condition(:process_running) do |c|
        c.running = true
        c.interval = 5.seconds
      end

      # failsafe
      on.condition(:tries) do |c|
        c.times = 5
        c.transition = :start
        c.interval = 5.seconds
      end
    end

    # start if process is not running
    w.transition(:up, :start) do |on|
      on.condition(:process_running) do |c|
        c.running = false
      end
    end
  end
end
