C{
  #include <stdlib.h>
  #include <stdio.h>
  #include <time.h>
}C

<% @node[:varnish][:app_proxy_host].each_with_index do |host, i| %>
backend app_server_<%= i+1 %> {
  .host = "<%= host %>";
  .port = "<%= @node[:varnish][:app_proxy_port] %>";
  <% unless @node[:chef][:roles].include?('vagrant') %>
  .probe = {
             .url = "<%= @node[:varnish][:app_proxy_host_probe_url] %>";
             .interval = 5s;
             .timeout = 1 s;
             .window = 5;
             .threshold = 3;
  }
  <% end %>
}
<% end %>

<% @node[:varnish][:my_fr2_proxy_host].each_with_index do |host, i| %>
backend my_fr2_server_<%= i+1 %> {
  .host = "<%= host %>";
  .port = "<%= @node[:varnish][:my_fr2_proxy_port] %>";
  <% unless @node[:chef][:roles].include?('vagrant') %>
  .probe = {
             .url = "<%= @node[:varnish][:my_fr2_proxy_host_probe_url] %>";
             .interval = 5s;
             .timeout = 1 s;
             .window = 5;
             .threshold = 3;
  }
  <% end %>
}
<% end %>

<% if @node[:varnish][:blog_proxy_host] %>
backend blog_server {
  .host = "<%= @node[:varnish][:blog_proxy_host] %>";
  .port = "<%= @node[:varnish][:blog_proxy_port] %>";
}
<% end %>

<% if @node[:varnish][:iodocs_proxy_host] %>
backend iodocs_server {
  .host = "<%= @node[:varnish][:iodocs_proxy_host] %>";
  .port = "<%= @node[:varnish][:iodocs_proxy_port] %>";
}
<% end %>


<% if @node[:chef][:roles].include?('proxy') %>
backend static_server {
  .host = "<%= @node[:varnish][:static_proxy_host] %>";
  .port = "<%= @node[:varnish][:static_proxy_port] %>";
}

director app_director round-robin {
  <% @node[:varnish][:app_proxy_host].each_with_index do |host, i| %>
    { .backend = app_server_<%= i+1 %>; }
  <% end %>
}

director my_fr2_director round-robin {
  <% @node[:varnish][:my_fr2_proxy_host].each_with_index do |host, i| %>
    { .backend = my_fr2_server_<%= i+1 %>; }
  <% end %>
}
<% end %>

sub vcl_recv {
    <% if @node[:varnish][:audit_proxy_host_name] %>
    if (req.http.host == "<%= @node[:varnish][:audit_proxy_host_name] %>") {
      set req.backend = app_director;
      return (pass);
    }
    <% end %>
    
    <% if @node[:varnish][:blog_proxy_host] %>
    # Rewrite top-level wordpress requests to /blog/
    set req.url = regsub(
        req.url,
        "^/(learn|policy|layout/footer_page_list|layout/homepage_post_list|layout/navigation_page_list)",
        "/blog/\1"
    );
    <% end %>
    
    # Reject Non-RFC2616 or CONNECT or TRACE requests.
    if (req.request != "GET" &&
      req.request != "HEAD" &&
      req.request != "PUT" &&
      req.request != "POST" &&
      req.request != "OPTIONS" &&
      req.request != "DELETE") {
        return (error);
    }

    # ab testing - check cookie to see if group has been assigned
    # either use it or drop down to C to get a random group
    # ensure group is passed along to app servers as a header
    if (req.http.Cookie ~ "(^|;) ?ab_group=\d+(;|$)") {
      if( req.http.Cookie ~ "ab_group=[0-9]+" ) {
        set req.http.X-AB-Group = regsub( req.http.Cookie,    ".*ab_group=", "");
        set req.http.X-AB-Group = regsub( req.http.X-AB-Group, ";.*", "");
      }
    } else {
      C{
        char buff[5];
        sprintf(buff,"%d",rand()%10 != 0 ? 1 : 2);
        VRT_SetHdr(sp, HDR_REQ, "\013X-AB-Group:", buff, vrt_magic_string_end);
      }C

      set req.http.X-Added-AB-Group = "1";

      if (req.http.Cookie) {
        set req.http.Cookie = req.http.Cookie ";";
      } else {
        set req.http.Cookie = "";
      }
      set req.http.Cookie = req.http.Cookie "ab_group=" req.http.X-AB-Group;
    }


    # Compression handled upstream; only want one in the cache
    if (req.http.Accept-Encoding) {
        remove req.http.Accept-Encoding;
    }
  
    # serve slightly stale content while a fresh version is fetched
    # better user experience and no thread pile up on the app servers
    set req.grace = 24h;
  
    # set the backend server based on request (if multi-server stack)
  <% if @node[:chef][:roles].include?('proxy') %>
    if (req.url ~ "^/my/assets/") {
      set req.backend = static_server;

      # Fetch from cache unless explicitly skipping cache
      if (req.http.Cookie ~ "skip_cache=<%= @node[:varnish][:skip_cache_key] %>") {
        return (pass);
      } else {  
        return (lookup);
      }

    } else if (req.url ~ "^/my/") {
      set req.backend = my_fr2_director;
      
      if (req.url ~ "^/my/special/user_utils" && ( req.http.Cookie ~ "document_numbers" || req.http.Cookie ~ "_my_fr2_session") ) {
        return(pass);
      }
    } else if (req.url ~ "^(/images|/javascripts|/flash|/stylesheets|/sitemap|/articles/html|/articles/page-images|/articles/xml|/public-inspection/raw_text|/regulations/html|/uploads)") {
      set req.backend = static_server;

      # Fetch from cache unless explicitly skipping cache
      if (req.http.Cookie ~ "skip_cache=<%= @node[:varnish][:skip_cache_key] %>") {
        return (pass);
      } else {  
        return (lookup);
      }

    <% if @node[:varnish][:blog_proxy_host] %>
    # logged in users must always pass
    }else if( req.url ~ "^/blog/wp-(login|admin)" ){
        set req.backend = blog_server;
        return (pass);
    } else if (req.url ~ "^(/blog|/policy|/learn|/layout/footer_page_list|/layout/homepage_post_list|/layout/navigation_page_list)") {
        set req.backend = blog_server;
        
        # Don't cache wordpress pages if logged in to wp
        if (req.http.Cookie ~ "wordpress_logged_in_" || req.http.Cookie ~ "comment_author_") {
            return (pass);
        }
    <% end %>

    <% if @node[:varnish][:iodocs_proxy_host] %>
    } else if (req.url ~ "^/developers/api/v1") {
      set req.backend = iodocs_server;
      return (lookup);
    <% end %>

    } else {
      set req.backend = app_director;
    }  
  <% end %>
    
  
    # NOT NEEDED WHEN USING A PROXY SERVER IN FRONT LIKE NGINX
    # Add a unique header containing the client address
    # remove req.http.X-Forwarded-For;
    # set    req.http.X-Forwarded-For = client.ip;
    
    # Pass POSTs etc directly on to the backend
    if (req.request != "GET" && req.request != "HEAD") {
        return (pass);
    }
    
    # Pass admin requests directly on to the backend
    if (req.url ~ "^/admin/") {
        return (pass);
    }
    
    # Prevent duplication of caches
    set req.http.host = "www.<%= @node[:varnish][:proxy_host_name] %>";
    
    # Fetch from cache unless explicitly skipping cache
    if (req.http.Cookie ~ "skip_cache=<%= @node[:varnish][:skip_cache_key] %>") {
      return (pass);
    } else {  
      return (lookup);
    }
}

sub vcl_fetch {
    # Remove cache headers from going out to client; cache headers are being used for
    # varnish, not browser/upstream caches.
    # Actual browser/upstream cache is being set by the nginx proxy in front of varnish
    unset beresp.http.Cache-Control;
    
    # serve slightly stale content while a fresh version is fetched
    # better user experience and no thread pile up on the app servers
    set beresp.grace = 24h;
    
    # Directly serve static content
    if (req.url ~ "^/my/assets/") {
        return(deliver);
    } else if (req.url ~ "^(/images|/javascripts|/flash|/stylesheets|/sitemap|/articles/html|/articles/xml|/regulations/html)") {
        return(deliver);
    }
    # ESI process the rest
    else {
        esi;
    }
    
    <% if @node[:varnish][:blog_proxy_host] %>
    # WP doesn't set these so we're doing it here to make sure it stays in the cache
    if (req.url ~ "^(/blog|/policy|/learn|/layout/footer_page_list|/layout/homepage_post_list|/wp-|/layout/navigation_page_list|/layout/homepage_post_list)") {
      set beresp.ttl = 24h;
    }
    <% end %>
}

# vcl_hash creates the key for varnish under which the object is stored. It is
# possible to store the same url under 2 different keys, by making vcl_hash
# create a different hash.
sub vcl_hash {

    # these 2 entries are the default ones used for vcl. Below we add our own.
    set req.hash += req.url;
    set req.hash += req.http.host;

    # doing ab testing on specific paths
    if (req.url ~ "^/layout/head_content" ) {
      set req.hash += "ab_group";
      set req.hash += req.http.X-AB-Group;
    }

    
    # Hash differently based on presence of javascript_enabled cookie.
    if( req.url ~ "^/(articles|public-inspection)/search/header" && req.http.Cookie ~ "javascript_enabled=1" ) {
        # add this fact to the hash
        set req.hash += "javascript enabled";
    }

    # Hash differently based on presence of expect_logged_in cookie.
    if( req.url ~ "^/my/special/navigation" && req.http.Cookie ~ "expect_logged_in=1" ) {
        # add this fact to the hash
        set req.hash += "user logged in"; 
    }
    
    return(hash);
}

sub vcl_error {
    set obj.http.Content-Type = "text/html; charset=utf-8";

    synthetic {"<!--"} obj.status " " obj.response {"-->"};
    return(deliver);
}

sub vcl_deliver {
  set resp.http.Etag = resp.http.Etag " abgroup=" req.http.X-AB-Group;

  # make sure ab testing is part of the cookie on the way back out
  if (req.http.X-Added-AB-Group) {
    C{
      time_t now;
      time(&now);
      now = now + 10*24*60*60;

      char expires [30];
      strftime( expires, 30, "%a, %d-%b-%Y %H:%M:%S GMT", localtime(&now));

      VRT_count(sp, 57);
      VRT_SetHdr(sp, HDR_RESP, "\013Set-Cookie:", "ab_group=", VRT_GetHdr(sp, HDR_REQ, "\013X-AB-Group:"), "; path=/; expires=", expires, vrt_magic_string_end);
    }C 
  }
}
